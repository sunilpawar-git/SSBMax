package com.ssbmax.core.data.remote

import android.content.Context
import android.content.Intent
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.auth.api.signin.GoogleSignInAccount
import com.google.android.gms.auth.api.signin.GoogleSignInClient
import com.google.android.gms.auth.api.signin.GoogleSignInOptions
import com.google.android.gms.common.api.ApiException
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.FirebaseUser
import com.google.firebase.auth.GoogleAuthProvider
import com.ssbmax.core.domain.model.SSBMaxUser
import com.ssbmax.core.domain.model.UserRole
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow
import kotlinx.coroutines.tasks.await
import javax.inject.Inject
import javax.inject.Singleton

/**
 * Firebase Authentication Service
 * Handles Google Sign-In and Firebase Auth operations
 */
@Singleton
class FirebaseAuthService @Inject constructor(
    @ApplicationContext private val context: Context
) {

    private val auth: FirebaseAuth = FirebaseAuth.getInstance()
    private val googleSignInClient: GoogleSignInClient by lazy {
        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
            .requestIdToken(getWebClientId())
            .requestEmail()
            .requestProfile()
            .build()
        GoogleSignIn.getClient(context, gso)
    }

    /**
     * Get Web Client ID from google-services.json
     * This is automatically generated by Firebase
     */
    private fun getWebClientId(): String {
        // The Web Client ID is automatically available via google-services.json
        // We need to get it from the resources
        val resources = context.resources
        val resourceId = resources.getIdentifier(
            "default_web_client_id",
            "string",
            context.packageName
        )
        return if (resourceId != 0) {
            resources.getString(resourceId)
        } else {
            throw IllegalStateException("Web Client ID not found. Check google-services.json configuration.")
        }
    }

    /**
     * Get current Firebase user
     */
    val currentFirebaseUser: FirebaseUser?
        get() = auth.currentUser

    /**
     * Observe authentication state changes
     */
    val authState: Flow<FirebaseUser?> = callbackFlow {
        val listener = FirebaseAuth.AuthStateListener { auth ->
            trySend(auth.currentUser)
        }
        auth.addAuthStateListener(listener)
        
        // Send initial state
        trySend(auth.currentUser)
        
        awaitClose {
            auth.removeAuthStateListener(listener)
        }
    }

    /**
     * Get Google Sign-In intent for launching sign-in flow
     */
    fun getSignInIntent(): Intent {
        return googleSignInClient.signInIntent
    }

    /**
     * Handle Google Sign-In result and authenticate with Firebase
     */
    suspend fun handleSignInResult(data: Intent?): Result<FirebaseUser> {
        return try {
            android.util.Log.d("FirebaseAuthService", "handleSignInResult: Processing Google sign-in data")
            val task = GoogleSignIn.getSignedInAccountFromIntent(data)
            val account = task.getResult(ApiException::class.java)
            
            if (account == null) {
                android.util.Log.e("FirebaseAuthService", "Google account is null")
                return Result.failure(Exception("Google Sign-In failed: Account is null"))
            }
            
            android.util.Log.d("FirebaseAuthService", "Google account obtained: ${account.email}")
            firebaseAuthWithGoogle(account)
        } catch (e: ApiException) {
            android.util.Log.e("FirebaseAuthService", "ApiException during sign-in: ${e.statusCode} - ${e.message}", e)
            Result.failure(Exception("Google Sign-In failed: ${e.message}", e))
        } catch (e: Exception) {
            android.util.Log.e("FirebaseAuthService", "Exception during sign-in: ${e.message}", e)
            Result.failure(Exception("Authentication error: ${e.message}", e))
        }
    }

    /**
     * Authenticate with Firebase using Google credentials
     */
    private suspend fun firebaseAuthWithGoogle(account: GoogleSignInAccount): Result<FirebaseUser> {
        return try {
            android.util.Log.d("FirebaseAuthService", "Authenticating with Firebase using Google credentials")
            val credential = GoogleAuthProvider.getCredential(account.idToken, null)
            val authResult = auth.signInWithCredential(credential).await()
            val firebaseUser = authResult.user
            
            if (firebaseUser != null) {
                android.util.Log.d("FirebaseAuthService", "Firebase authentication successful: ${firebaseUser.email}")
                Result.success(firebaseUser)
            } else {
                android.util.Log.e("FirebaseAuthService", "Firebase user is null after authentication")
                Result.failure(Exception("Firebase authentication failed: User is null"))
            }
        } catch (e: Exception) {
            android.util.Log.e("FirebaseAuthService", "Firebase authentication error: ${e.message}", e)
            Result.failure(Exception("Firebase authentication error: ${e.message}", e))
        }
    }

    /**
     * Sign out from Firebase and Google
     */
    suspend fun signOut(): Result<Unit> {
        return try {
            auth.signOut()
            googleSignInClient.signOut().await()
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(Exception("Sign out error: ${e.message}", e))
        }
    }

    /**
     * Revoke access and sign out
     */
    suspend fun revokeAccess(): Result<Unit> {
        return try {
            auth.signOut()
            googleSignInClient.revokeAccess().await()
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(Exception("Revoke access error: ${e.message}", e))
        }
    }

    /**
     * Check if user is authenticated
     */
    fun isAuthenticated(): Boolean {
        return auth.currentUser != null
    }

    /**
     * Get current user ID
     */
    fun getCurrentUserId(): String? {
        return auth.currentUser?.uid
    }

    /**
     * Delete user account
     */
    suspend fun deleteAccount(): Result<Unit> {
        return try {
            val user = auth.currentUser
                ?: return Result.failure(Exception("No user logged in"))
            
            user.delete().await()
            googleSignInClient.revokeAccess().await()
            Result.success(Unit)
        } catch (e: Exception) {
            Result.failure(Exception("Delete account error: ${e.message}", e))
        }
    }
}

